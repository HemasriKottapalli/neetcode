(* You are given an array of non-negative integers height which represent an elevation map. Each value height[i] represents the height of a bar, which has a width of 1.

Return the maximum area of water that can be trapped between the bars.

Example 1:
Input: height = [0,2,0,3,1,0,1,3,2,1]
Output: 9

Constraints:
1 <= height.length <= 1000
0 <= height[i] <= 1000 *)

---------------------------------------------------------------------------------------------------------------
#Driver Code
height = [0,2,0,3,1,0,1,3,2,1]
print(get_trapped_water(height))
---------------------------------------------------------------------------------------------------------------
Approach 1
---------------------------------------------------------------------------------------------------------------
def get_trapped_water(height : list[int]) -> int:
    ans = [0]*len(height)
    for i in range(1, len(height)-1):
        lm = max(height[0:i+1])
        rm = max(height[i:len(height)])
        ans[i] = min(rm, lm) - height[i]
    return sum(ans)

T.C : O(n^2)
S.C : O(n)
---------------------------------------------------------------------------------------------------------------
Approach 2
---------------------------------------------------------------------------------------------------------------
def get_trapped_water(height : list[int]) -> int:
    ans = [0]*len(height)
    rm = [0]*len(height)
    lm = [0]*len(height)
    
    lm[0] = height[0]
    for i in range(1,len(height)):
        lm[i] = max(height[i], lm[i-1])
    print(lm)
    
    rm[-1] = height[-1]    
    for i in range(len(height)-2, -1, -1):
        rm[i] = max(height[i], rm[i+1])
    print(rm)

    for i in range(1, len(height)-1):
        ans[i] = min(rm[i], lm[i]) - height[i]
    return sum(ans)

T.C : O(n)
S.C : O(n)
---------------------------------------------------------------------------------------------------------------
Approach 3
---------------------------------------------------------------------------------------------------------------
def get_trapped_water(height : list[int]) -> int:
    ans = 0
    leftmax = 0
    rightmax = 0
    
    i=0
    j=len(height)-1
    
    while(i<j):
        leftmax = max(leftmax, height[i])
        rightmax = max(rightmax, height[j])
        
        if height[i] < height[j]:
            ans += leftmax - height[i]
            i+=1
        else:
            ans += rightmax - height[j]
            j-=1
    return ans

T.C : O(n)
S.C : O(1)
