You are given an integer n. Return all well-formed parentheses strings that you can generate with n pairs of parentheses.

Example 1:

Input: n = 1

Output: ["()"]
Example 2:

Input: n = 3

Output: ["((()))","(()())","(())()","()(())","()()()"]
You may return the answer in any order.

Constraints:

1 <= n <= 7

def generate_valid_parenthesis(n:int):
    result = []
    stack = []
    
    def backtrack(openCount:int, closedCount:int):
        if openCount == closedCount == n:
            result.append(''.join(stack))
            return
        
        if openCount < n:
            stack.append('(')
            backtrack(openCount+1, closedCount)
            stack.pop()
            
        if closedCount < openCount:
            stack.append(')')
            backtrack(openCount, closedCount+1)
            stack.pop()
            
    backtrack(0,0)
    return result
    

#Driver Code
n = 3
print(generate_valid_parenthesis(n))


T.C : O(n * 4^n / sqrt(n))
S.C : O(nâ‹…Cn)
